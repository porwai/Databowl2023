{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPfFk49OdB8ZSrb1cVXeywU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yfrP0G5qt2D3","executionInfo":{"status":"ok","timestamp":1677383124398,"user_tz":300,"elapsed":394,"user":{"displayName":"Pongsapak Waiwitlikhit","userId":"10845011359698803690"}},"outputId":"bdfad69c-ac20-400e-e313-aa372a0217f7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9323473223313996"]},"metadata":{},"execution_count":7}],"source":["import pandas as pd # for data manipulation\n","import numpy as np # for data manipulation\n","\n","from sklearn.model_selection import train_test_split # for splitting the data into train and test samples\n","from sklearn.metrics import classification_report # for model evaluation metrics\n","from sklearn import tree # for decision tree models\n","\n","import plotly.express as px  # for data visualization\n","import plotly.graph_objects as go # for data visualization\n","import graphviz # for plotting decision tree graphs\n","\n","from sklearn.preprocessing import OneHotEncoder\n","from sklearn.preprocessing import MultiLabelBinarizer\n","import pickle\n","from sklearn.pipeline import make_pipeline\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import GradientBoostingRegressor\n","from sklearn.model_selection import train_test_split\n","import random\n","\n","\n","### YOUR TEST DATA GOES HERE ####\n","#########\n","df=pd.read_csv('TEST_DATA.csv', encoding='utf-8')\n","#####################\n","###############\n","pickled_model = pickle.load(open('Waiwitlikhit_Rosenthal_model.pkl', 'rb'))\n","\n","\n","\n","\n","\n","# Get one hot encoding of columns B\n","one_hot = pd.get_dummies(df['language'])\n","# Drop column B as it is now encoded\n","#df = df.drop('languauge',axis = 1)\n","# Join the encoded df\n","df = df.drop('language', axis=1)\n","df = df.join(one_hot, lsuffix=\"_left\")\n","\n","\n","df['genres'] = df['genres'].str.replace(' ', '')\n","df['genres'] = df['genres'].str.strip().str.split(',')\n","s = df['genres'].explode()\n","df = df.join(pd.crosstab(s.index, s))\n","\n","\n","class Date:\n","    def __init__(self, m, d, y):\n","        self.d = d\n","        self.m = m\n","        self.y = y\n"," \n"," \n","# To store number of days in all months from\n","# January to Dec.\n","monthDays = [31, 28, 31, 30, 31, 30,\n","             31, 31, 30, 31, 30, 31]\n"," \n","# This function counts number of leap years\n","# before the given date\n"," \n"," \n","def countLeapYears(d):\n"," \n","    years = d.y\n"," \n","    # Check if the current year needs to be considered\n","    # for the count of leap years or not\n","    if (d.m <= 2):\n","        years -= 1\n"," \n","    # An year is a leap year if it is a multiple of 4,\n","    # multiple of 400 and not a multiple of 100.\n","    return int(years / 4) - int(years / 100) + int(years / 400)\n"," \n"," \n","# This function returns number of days between two\n","# given dates\n","def getDifference(dt1, dt2):\n"," \n","    # COUNT TOTAL NUMBER OF DAYS BEFORE FIRST DATE 'dt1'\n"," \n","    # initialize count using years and day\n","    n1 = dt1.y * 365 + dt1.d\n"," \n","    # Add days for months in given date\n","    for i in range(0, dt1.m - 1):\n","        n1 += monthDays[i]\n"," \n","    # Since every leap year is of 366 days,\n","    # Add a day for every leap year\n","    n1 += countLeapYears(dt1)\n"," \n","    # SIMILARLY, COUNT TOTAL NUMBER OF DAYS BEFORE 'dt2'\n"," \n","    n2 = dt2.y * 365 + dt2.d\n","    for i in range(0, dt2.m - 1):\n","        n2 += monthDays[i]\n","    n2 += countLeapYears(dt2)\n"," \n","    # return difference between two counts\n","    return (n2 - n1)\n"," \n","\n","# Declare a list that is to be converted into a column\n","date_number = []\n","\n","# Driver program\n","for item in df['release_date']:\n","  dt1 = Date(1,1,1900)\n","  date = str(item)\n","  date = date.split(\"/\")\n","  dt2 = Date(int(date[0]),int(date[1]),int(date[2]))\n","  date_number.append(float(getDifference(dt1,dt2)))\n","\n","# Using 'Address' as the column name\n","# and equating it to the list\n","df['date_number'] = date_number\n","del df['release_date']\n","df['af'] = df.get('af', 0) \n","df['bn'] = df.get('bn', 0) \n","df['cs'] = df.get('cs', 0)\n","df['cy'] = df.get('cy', 0) \n","df['da'] = df.get('da', 0) \n","df['de'] = df.get('de', 0) \n","df['el'] = df.get('el', 0) \n","df['fa'] = df.get('fa', 0) \n","df['he'] = df.get('he', 0) \n","df['hu'] = df.get('hu', 0) \n","df['km'] = df.get('km', 0) \n","df['is'] = df.get('is', 0) \n","df['mk'] = df.get('mk', 0) \n","df['ml'] = df.get('ml', 0) \n","df['mn'] = df.get('mn', 0) \n","df['mr'] = df.get('mr', 0) \n","df['ms'] = df.get('ms', 0) \n","df['kn'] = df.get('kn', 0) \n","df['nb'] = df.get('nb', 0) \n","df['nl'] = df.get('nl', 0) \n","df['pt'] = df.get('pt', 0) \n","df['sh'] = df.get('sh', 0) \n","df['si'] = df.get('si', 0) \n","df['sk'] = df.get('sk', 0) \n","df['sl'] = df.get('sl', 0) \n","df['sr'] = df.get('sr', 0) \n","df['tr'] = df.get('tr', 0) \n","df['uk'] = df.get('uk', 0) \n","df['xx'] = df.get('xx', 0) \n","df['zh'] = df.get('zh', 0) \n","df['TVMovie'] = df.get('TVMovie', 0) \n","\n","\n","relevant_col = ['date_number', 'popularity', 'reviews', 'reviews_average', 'budget', 'runtime', 'af', 'ar', 'bn', 'cn', 'cs', 'cy', 'da', 'de', 'el', 'en', 'es', 'fa', 'fr', 'he', 'hi', 'hu', 'id', 'is', 'it', 'ja', 'km', 'kn', 'ko', 'mk', 'ml', 'mn', 'mr', 'ms', 'nb', 'nl', 'no', 'pl', 'pt', 'ru', 'sh', 'si', 'sk', 'sl', 'sr', 'sv', 'ta', 'te', 'th', 'tl', 'tr', 'uk', 'ur', 'xx', 'zh', 'Action', 'Adventure', 'Animation', 'Comedy', 'Crime', 'Documentary', 'Drama', 'Family', 'Fantasy', 'History', 'Music', 'Mystery', 'Romance', 'ScienceFiction', 'TVMovie', 'Thriller', 'War', 'Western']\n","TestValueX = df[relevant_col]\n","TestValueY = df['revenue']\n","TestValueY = np.ravel(TestValueY)\n","\n","pickled_model.score(TestValueX, TestValueY)"]},{"cell_type":"code","source":[],"metadata":{"id":"0OE5g2ioyVww"},"execution_count":null,"outputs":[]}]}